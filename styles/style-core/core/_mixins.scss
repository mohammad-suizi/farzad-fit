@use "../base/variables" as *;

// Responsive
@mixin min($size) {
  $min-width: if(
    map-has-key($breakpoints, $size),
    map-get($breakpoints, $size),
    $size
  );

  @if ($min-width != 0px) {
    @media screen and (min-width: calc($min-width + 1px)) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin max($size) {
  $max-width: if(
    map-has-key($breakpoints, $size),
    map-get($breakpoints, $size),
    $size
  );
  @if ($max-width != 0 and $max-width != 0px) {
    @media screen and (max-width: $max-width) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin between($min-size, $max-size) {
  $min-width: if(
    map-has-key($breakpoints, $min-size),
    map-get($breakpoints, $min-size),
    $min-size
  );
  $max-width: if(
    map-has-key($breakpoints, $max-size),
    map-get($breakpoints, $max-size),
    $max-size
  );

  @media screen and (min-width: ($min-width + 1)) and (max-width: $max-width) {
    @content;
  }
}

@mixin container-min($size, $media-fallback-bp) {
  @supports (container-type: inline-size) {
    @container (min-width: #{$size}) {
      @content;
    }
  }

  @supports not (container-type: inline-size) {
    @include min($media-fallback-bp) {
      @content;
    }
  }
}

@mixin container-max($size, $media-fallback-bp) {
  @supports (container-type: inline-size) {
    @container (max-width: #{$size}) {
      @content;
    }
  }

  @supports not (container-type: inline-size) {
    @include max($media-fallback-bp) {
      @content;
    }
  }
}

// Typography
@mixin fs($type, $size) {
  font-size: map-get($typography, $type, $size, mobile, fs);
  line-height: map-get($typography, $type, $size, mobile, lh);
  @if map-has-key($typography, $type, $size, desktop) {
    @include min(md) {
      font-size: map-get($typography, $type, $size, desktop, fs);
      line-height: map-get($typography, $type, $size, desktop, lh);
    }
  }
}
@mixin fvs($weight: 300, $dots: 3) {
  font-variation-settings: "wght" $weight, "rdot" $dots;
}

// Dark Mode
@mixin dark-mode {
  [data-theme="dark"] & {
    @content;
  }
}

// Line clamb
@mixin line-clamb($number: 1) {
  display: -webkit-box;
  -webkit-line-clamp: $number;
  -webkit-box-orient: vertical;
  overflow: hidden;
  > * {
    display: inline;
  }
}

@mixin hide-scrollbars() {
  -ms-overflow-style: none;
  scrollbar-width: none;
  &::-webkit-scrollbar {
    display: none;
  }
}

// Hover Devices
@mixin hover {
  @media (hover: hover) {
    @content;
  }
}
@mixin not-hover {
  @media not (hover: hover) {
    @content;
  }
}
@mixin text-background($gradiant) {
  background-image: $gradiant;
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}
